class Attendee{
    private name :string;
    private email :string;
    private phoneNumber :string;
    private event :string;

    constructor(name :string , email :string,phoneNumber :string,event :string){
        this.name = name;
        this.email=email;
        this.phoneNumber =phoneNumber;
        this.event = event;
    }

    public validateData(){
        let p : Promise<string> = new Promise((resolve,reject)=>{
            setTimeout(()=>{
                  if(this.name.trim().length==0){
                    reject("Name must not be empty.")
                  }
                  else
                  {
                      let ex=/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/
                      if(!this.email.match(ex))
                      {
                          reject("Email must be a valid email address.");
                      }
                      else if(this.phoneNumber.length< 8)
                      {
                          reject("Phone number must be a 10-digit number.");
                      }
                      else if(this.event=="s")
                      {
                          reject("Event must be selected from the predefined list.");
                      }
                      else
                      {
                          resolve("Success! Registration is complete.");
                      }
                  }
            })

        });
        return p;
    }
}


function submitForm()
{
    let name=(document.getElementById("name") as HTMLInputElement).value;
    let email=(document.getElementById("email") as HTMLInputElement).value;
    let phoneNumber=(document.getElementById("phoneNumber") as HTMLInputElement).value;
    let event=(document.getElementById("event") as HTMLInputElement).value;

    let user=new Attendee(name,email,phoneNumber,event);

    let promise= user.validateData();
    promise.then((msg)=> document.getElementById("successMessage").innerHTML=msg)
    .catch((msg)=> document.getElementById("errorMessage").innerHTML=msg);

}



<!DOCTYPE html>
<html>
<head>
   
</head>
<body>
    <h1>Event Registration Form</h1>
    <div class="container">
        <div class="form-group">
            <label for="name">Name*:</label>
            <input type="text" name="name" id="name">
            <br>
        </div>
        <div class="form-group">
            <label for="email">Email*:</label>
            <input type="text" name="email" id="email">
            <br>
        </div>
        <div class="form-group">
            <label for="phoneNumber">Phone Number*:</label>
            <input type="text" name="phoneNumber" id="phoneNumber">
            <br>
        </div>
        <div class="form-group">
            <select name="event" id="event">
                <option value="s">Select an event</option>
                <option value="Conference">Conference</option>
                <option value="Workshop">Workshop</option>
                <option value="Seminar">Seminar</option>
            </select>
            <br>
        </div>
        
        <button id="submitButton" onclick="submitForm()">Submit</button>
        <div id="successMessage"></div>
        <div id="errorMessage"></div>
    </div>
    <script src="script.js"></script>
</body>
</html>







<!DOCTYPE html>
<html>
<head>
   
</head>
<body>
    <h1>Task Management</h1>
    <div class="container">
        <div class="form-group">
            <label for="title">Title*:</label>
            <input type="text" name="title" id="title">
            <br>
        </div>
        <div class="form-group">
            <label for="description">Description*:</label>
            <input type="text" name="description" id="description">
            <br>
        </div>
        <div class="form-group">
            <label for="priority">Priority</label>
            <select name="priority" id="priority">
                <option value="s">Select a priority</option>
                <option value="High">High</option>
                <option value="Medium">Medium</option>
                <option value="Low">Low</option>
            </select>
        </div>
         <div class="form-group">
            <label for="dueDate">Due Date*:</label>
            <input type="date" name="dueDate" id="dueDate">
            <br>
        </div>
        <button id="submitButton" onclick="submitForm()">Submit</button>
        <div id="successMessage"></div>
        <div id="errorMessage"></div>
    </div>
    <script src="script.js"></script>
</body>
</html>

class Task{
    private task :string;
    private description :string;
    private priority :string;
    private dueDate :string;

    constructor(task :string , description :string,priority :string,dueDate :string){
        this.task = task;
        this.description=description;
        this.priority =priority;
        this.dueDate = dueDate;
    }

    public validateData(){
        let p : Promise<string> = new Promise((resolve,reject)=>{
            setTimeout(()=>{
                  if(this.task.trim().length==0){
                    reject("Title must not be empty.")
                  }
                  else
                  {
                    //   let ex=/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/
                    //   if(!this.email.match(ex))
                    //   {
                    //       reject("Email must be a valid email address.");
                    //   }
                      if(this.description.trim().length==0)
                      {
                          reject("Description must not be empty.");
                      }
                      else if(this.priority=="s")
                      {
                          reject("Priority must be selected from the predefined list.");
                      }
                      else if(this.dueDate.trim().length==0)
                      {
                          reject("Due date must not be empty.");
                      }
                      else
                      {
                          resolve("Added the task successfully.");
                      }
                  }
            })

        });
        return p;
    }
}


function submitForm()
{
    let task=(document.getElementById("title") as HTMLInputElement).value;
    let description=(document.getElementById("description") as HTMLInputElement).value;
    let priority=(document.getElementById("priority") as HTMLInputElement).value;
    let date=(document.getElementById("dueDate") as HTMLInputElement).value;

    let user=new Task(task,description,priority,date);

    let promise= user.validateData();
    promise.then((msg)=> document.getElementById("successMessage").innerHTML=msg)
    .catch((msg)=> document.getElementById("errorMessage").innerHTML=msg);

}

